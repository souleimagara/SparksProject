//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Microservices.LeaderboardServer"/> </summary
    public sealed class LeaderboardServerClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public LeaderboardServerClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "LeaderboardServer";
            }
        }
        
        /// <summary>
        /// Call the ApproveSparksAsync method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.ApproveSparksAsync"/>
        /// </summary>
        public Beamable.Common.Promise<string> ApproveSparksAsync(long otherUserId, long currentUserId)
        {
            object raw_otherUserId = otherUserId;
            object raw_currentUserId = currentUserId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("otherUserId", raw_otherUserId);
            serializedFields.Add("currentUserId", raw_currentUserId);
            return this.Request<string>("LeaderboardServer", "ApproveSparksAsync", serializedFields);
        }
        
        /// <summary>
        /// Call the DeclineSparksAsync method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.DeclineSparksAsync"/>
        /// </summary>
        public Beamable.Common.Promise<string> DeclineSparksAsync(long otherUserId, long currentUserId)
        {
            object raw_otherUserId = otherUserId;
            object raw_currentUserId = currentUserId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("otherUserId", raw_otherUserId);
            serializedFields.Add("currentUserId", raw_currentUserId);
            return this.Request<string>("LeaderboardServer", "DeclineSparksAsync", serializedFields);
        }
        
        /// <summary>
        /// Call the GetSparksStatusAsync method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.GetSparksStatusAsync"/>
        /// </summary>
        public Beamable.Common.Promise<int> GetSparksStatusAsync(long otherUserId, long currentUserId)
        {
            object raw_otherUserId = otherUserId;
            object raw_currentUserId = currentUserId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("otherUserId", raw_otherUserId);
            serializedFields.Add("currentUserId", raw_currentUserId);
            return this.Request<int>("LeaderboardServer", "GetSparksStatusAsync", serializedFields);
        }
        
        /// <summary>
        /// Call the ReturnToAdminContext method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.ReturnToAdminContext"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> ReturnToAdminContext(long adminUserId)
        {
            object raw_adminUserId = adminUserId;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("adminUserId", raw_adminUserId);
            return this.Request<Beamable.Common.Unit>("LeaderboardServer", "ReturnToAdminContext", serializedFields);
        }
        
        /// <summary>
        /// Call the CauseNotification method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.CauseNotification"/>
        /// </summary>
        public Beamable.Common.Promise<System.Threading.Tasks.Task> CauseNotification(long userid, string message)
        {
            object raw_userid = userid;
            object raw_message = message;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("userid", raw_userid);
            serializedFields.Add("message", raw_message);
            return this.Request<System.Threading.Tasks.Task>("LeaderboardServer", "CauseNotification", serializedFields);
        }
        
        /// <summary>
        /// Call the AutoApproveSparks method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.AutoApproveSparks"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Scheduler.Job> AutoApproveSparks(string leaderboardId, long gamertag)
        {
            object raw_leaderboardId = leaderboardId;
            object raw_gamertag = gamertag;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("leaderboardId", raw_leaderboardId);
            serializedFields.Add("gamertag", raw_gamertag);
            return this.Request<Beamable.Common.Scheduler.Job>("LeaderboardServer", "AutoApproveSparks", serializedFields);
        }
        
        /// <summary>
        /// Call the sparkcontroller method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.sparkcontroller"/>
        /// </summary>
        public Beamable.Common.Promise<System.Threading.Tasks.Task> sparkcontroller(string leaderbordid, long gamertag)
        {
            object raw_leaderbordid = leaderbordid;
            object raw_gamertag = gamertag;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("leaderbordid", raw_leaderbordid);
            serializedFields.Add("gamertag", raw_gamertag);
            return this.Request<System.Threading.Tasks.Task>("LeaderboardServer", "sparkcontroller", serializedFields);
        }
        
        /// <summary>
        /// Call the LeaderboardServiceGetBoard method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.LeaderboardServiceGetBoard"/>
        /// </summary>
        public Beamable.Common.Promise<string> LeaderboardServiceGetBoard(string id, long gamertag)
        {
            object raw_id = id;
            object raw_gamertag = gamertag;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("id", raw_id);
            serializedFields.Add("gamertag", raw_gamertag);
            return this.Request<string>("LeaderboardServer", "LeaderboardServiceGetBoard", serializedFields);
        }
        
        /// <summary>
        /// Call the RetrieveAndLogScheduledJobs method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.RetrieveAndLogScheduledJobs"/>
        /// </summary>
        public Beamable.Common.Promise<System.Collections.Generic.List<Beamable.Common.Scheduler.Job>> RetrieveAndLogScheduledJobs()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<System.Collections.Generic.List<Beamable.Common.Scheduler.Job>>("LeaderboardServer", "RetrieveAndLogScheduledJobs", serializedFields);
        }
        
        /// <summary>
        /// Call the GetJobActivity method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.GetJobActivity"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetJobActivity(string jobid)
        {
            object raw_jobid = jobid;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("jobid", raw_jobid);
            return this.Request<string>("LeaderboardServer", "GetJobActivity", serializedFields);
        }
        
        /// <summary>
        /// Call the DeleteAllJobs method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.DeleteAllJobs"/>
        /// </summary>
        public Beamable.Common.Promise<System.Threading.Tasks.Task> DeleteAllJobs()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<System.Threading.Tasks.Task>("LeaderboardServer", "DeleteAllJobs", serializedFields);
        }
        
        /// <summary>
        /// Call the DeleteSpeficJob method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.DeleteSpeficJob"/>
        /// </summary>
        public Beamable.Common.Promise<System.Threading.Tasks.Task> DeleteSpeficJob(string id)
        {
            object raw_id = id;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("id", raw_id);
            return this.Request<System.Threading.Tasks.Task>("LeaderboardServer", "DeleteSpeficJob", serializedFields);
        }
        
        /// <summary>
        /// Call the GetStats method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.GetStats"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetStats(long gamertag)
        {
            object raw_gamertag = gamertag;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("gamertag", raw_gamertag);
            return this.Request<string>("LeaderboardServer", "GetStats", serializedFields);
        }
        
        /// <summary>
        /// Call the LeaderboardServiceGetBoardBatch method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.LeaderboardServiceGetBoardBatch"/>
        /// </summary>
        public Beamable.Common.Promise<string> LeaderboardServiceGetBoardBatch(string id, long gamertag)
        {
            object raw_id = id;
            object raw_gamertag = gamertag;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("id", raw_id);
            serializedFields.Add("gamertag", raw_gamertag);
            return this.Request<string>("LeaderboardServer", "LeaderboardServiceGetBoardBatch", serializedFields);
        }
        
        /// <summary>
        /// Call the ApproveSparksAutomaticallyWithTime method on the LeaderboardServer microservice
        /// <see cref="Beamable.Microservices.LeaderboardServer.ApproveSparksAutomaticallyWithTime"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Scheduler.Job> ApproveSparksAutomaticallyWithTime(string leaderboardId, long gamertag, int time, string name)
        {
            object raw_leaderboardId = leaderboardId;
            object raw_gamertag = gamertag;
            object raw_time = time;
            object raw_name = name;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("leaderboardId", raw_leaderboardId);
            serializedFields.Add("gamertag", raw_gamertag);
            serializedFields.Add("time", raw_time);
            serializedFields.Add("name", raw_name);
            return this.Request<Beamable.Common.Scheduler.Job>("LeaderboardServer", "ApproveSparksAutomaticallyWithTime", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersLeaderboardServerClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Int64 : MicroserviceClientDataWrapper<long>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Int32 : MicroserviceClientDataWrapper<int>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForLeaderboardServerClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<LeaderboardServerClient>();
        }
        
        public static LeaderboardServerClient LeaderboardServer(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<LeaderboardServerClient>();
        }
    }
}
